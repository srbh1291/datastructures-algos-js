<script type="text/javascript">

class Node {
    constructor(value){
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class BinarySearchTree {
    constructor(){
        this.root = null;
    }

    insert(insval){

    	let newNode = new Node(insval);

    	if(this.root==null) {
    		this.root = newNode;
    	}

    	let current = this.root;
    	
    	let i = 0;

    	while(true){

    		if(insval === current.value) { return undefined;}

    		if(insval<current.value){

    			if(current.left==null){
	    			current.left = newNode;
	    			return this;
	    		}

	    		current = current.left;

    		} else if(insval>current.value){

    			if(current.right==null){
	    			current.right = newNode;
	    			return this;
	    		}

	    		current = current.right;

    		}
            
    	}

    }

    bfs_traversal(){

        let q = [this.root];
        let v = [];
        let result = [];
        let i = 0;

        while (q.length!==0) {
        
            v.push(q.shift());

            if(v[v.length-1].left){
                q.push(v[v.length-1].left);
            } 

            if(v[v.length-1].right){
                q.push(v[v.length-1].right);
            }

        }


        v.forEach( function(element, index) {
            result.push(element.value);
        });

        return result;

    }

    dfs_preorder_traversal(){

        let curr = this.root;
        let res = [];
        let biNodes = [];
        let dfsResult = [];

        let i = 0;

        while (curr.left) {

            // console.log(curr.left);
        
            if(curr.left){
                res.push(curr)
            }

            if(curr.right){
                biNodes.push(curr);
            }

            curr = curr.left;

        }
            res.push(curr);


        for(let i=biNodes.length-1;i>=0;i--){   

            let rightCurr = biNodes[i].right;

            while (rightCurr) {
              res.push(rightCurr);
              rightCurr = rightCurr.right;
            }

        }


        res.forEach( function(element, index) {
            dfsResult.push(element.value);
        });

        return dfsResult;

    }

    dfs_postorder_traversal(){

        let curr = this.root;
        let res = [];
        let biNodes = [];
        let dfsResult = [];

        let i = 0;

        while (curr.left) {

            // console.log(curr.left);

            if(curr.right){
                biNodes.push(curr);
            }

            curr = curr.left;

        }

            
            res.push(curr);


        // for(let i=biNodes.length-1;i>=0;i--){   

        //     let rightCurr = biNodes[i].right;

        //     while (rightCurr) {
        //       res.push(rightCurr);
        //       rightCurr = rightCurr.right;
        //     }

        // }


        // res.forEach( function(element, index) {
        //     dfsResult.push(element.value);
        // });

        return dfsResult;

    }

    dfs_inorder_traversal(){

        let curr = this.root;
        let res = [];
        let biNodes = [];
        let dfsResult = [];

        let i = 0;

        while (curr.left) {

            if(curr.right){
                biNodes.push(curr);
            }

            curr = curr.left;

        }
 
            res.push(curr);

            for(let i=biNodes.length-1;i>=0;i--) { 

               res.push(biNodes[i]);
               let rightCurr = biNodes[i].right;

                while (rightCurr) {
                  res.push(rightCurr);
                  rightCurr = rightCurr.right;
                }

            }

            res.forEach(function(element, index){
                dfsResult.push(element.value);
            });


            return dfsResult;

    }

}

var tree = new BinarySearchTree();
tree.insert(10);
tree.insert(6);
tree.insert(15);
tree.insert(3);
tree.insert(8);
tree.insert(20);

let bfs_result = tree.bfs_traversal();

let dfs_preorder_result = tree.dfs_preorder_traversal();

let dfs_inorder_result = tree.dfs_inorder_traversal();

console.log(dfs_inorder_result);



</script>
